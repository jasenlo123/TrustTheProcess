[meta title:"Trust the Process - 77 Nationalities & 66 Currencies" description:"A Process Write-up for my third data-driven project"
  shareImageUrl:"https://jasenlo123.github.io/jasenlo123-The-Minerva-Quest---Forex/static/images/buster.gif"
  shareImageWidth:"880"
  shareImageHeight:"440" 
  /]

[var name:"parametricSlug" value:"forex" /]

[Nav fullWidth:true /]

[Header
  title:`["77 Nationalities & 66 Currencies"]`
  longTitle:`["77 Nationalities", "& 66 Currencies"]`
  date:"December, 2020"
  subtitle:"experimenting with Idyll and Flourish"
  fullWidth:true
/]

[Aside]
(Click [link text:"underlines" url:"/" target:"_blank"/] to visit links. Hover over [Annotation annotationText:"This is an annotation!"] highlights [/Annotation] for inline annotations. ```Code or frameworks``` are denoted by this style.)
[/Aside]

#### Finding Out About Idyll!

##### **Sidenote**: This entire website is built in ```Idyll```. Yeap, it's awesome.

[Aside]
    [Preview header:"77 Nationalities & 66 Currencies" description:"A Minerva Quest data-driven investigative report about the impact of foreign exchange rates on student tuition." media:"https://jasenlo123.github.io/jasenlo123-The-Minerva-Quest---Forex/static/images/buster.gif" url:"https://jasenlo123.github.io/jasenlo123-The-Minerva-Quest---Forex/" /]
    [Caption]
    Click this card to view the project!
    [/Caption]
[/Aside]

  In my two completed visual data stories that used ```D3```, I consistently identified the intensive amount of work required to build custom ```D3``` data viz and the lack of mobile responsiveness as weaknesses in my workflow and design processes. Writing ```D3``` code wasn't the hardest part about data viz, even though it was hard, but it was integrating the ```D3``` data viz into the rest of a web application with lots of other moving parts, which proved to be a difficult challenge. 

  Thus, when I came across the ```Idyll``` markup language in an article a classmate sent me called *[link text:"Communicating with Interactive Articles" url:"https://distill.pub/2020/communicating-with-interactive-articles/" target:"_blank"/]*, which was specifically designed for interactive and data driven articles. I figured that learning ```Idyll``` might give me a huge productivity boost when it came to producing data stories because ```Idyll``` takes care of much of the mobile-responsiveness and templating issues.

```
  [var name:"scrollerIndex" value:0 /] 
  [Scroller currentStep:scrollerIndex]
    [Graphic]
        [Chart type:`"line"` data:`data.slice(0, scrollerIndex + 2)` /]
    [/Graphic]

    [Step]## Hey, neat, here's some data![/Step]
    [Step]## ...   [/Step]
  [/Scroller]
  ```
  [Caption]
  How one implements a scroller component in ```Idyll```. Easy huh?
  [/Caption]

[Aside]

  [img src:"../forex/static/images/audrey_waters.png" alt:"Audrey's comments that lead to this piece." width:`100%` height:"auto"/]
  [Caption]
  Audrey's feedback on my previous piece about Minerva housing costs, where she noted how a currency's strength affect students living costs.
  [/Caption]
[/Aside]

#### Ideation


  As I was playing around with ```Idyll``` and learning how it worked, I was also conceptualising a data story regarding the impact of foreign exchange rates on Minerva students' costs. The foreign exchange analysis idea was originally brought up by Audrey Waters when she edited the draft of the previous housing story. 

  As I was playing around with ```Idyll``` and learning how it worked, I was also conceptualising a data story regarding the impact of foreign exchange rates on Minerva students' costs. The foreign exchange analysis idea was originally brought up by Audrey Waters when she edited the draft of the previous housing story. 


#### Data + Development


  Initially I thought that constructing this dataset would be relatively straight forward, since all I had to do was find an [Annotation annotationText:"Application Programming Interface (API) - a software intermediary that allows two applications to talk to each other. In this case, I was looking for an exchange rate platform to pass data to my Python code environment smoothly"] ```API``` [/Annotation] with historic foreign exchange data. Then I realised that there's many nationalities at Minerva, and I had find out how which nationalities were represented at Minerva and also map each nationality to the respective currency foreign currency first. 


  Thanks to [link text:"data" url:"https://gist.github.com/emmastiefel/c891ff0910a253b1343259c5f27510bd
" target:"_blank"/] compiled by my talented colleague and *Minerva Quest* Editor-in-Chief, Emma Stiefel, I was able to find all the nationalities, and used a [link text:"currency-to-nationality map" url:"https://gist.github.com/HarishChaudhari/4680482" target:"_blank"/] to find which currencies were used in these countries. It turned out that at least 77 nationalities and 66 currencies were represented in the Minerva student body.

  [Preview header:"Emma's Portfolio" description:"Emma is the most prolific student journalist I know, and one of the most talented and thoughtful data persons. " media:"https://emmastiefel.github.io/Portfolio%20Visuals/Visa%20Fees%20Visuals/Screen%20Shot%202021-02-06%20at%208.59.04%20PM.png" url:"https://emmastiefel.github.io/" /]
  [Caption]
    Click this to check out some of Emma's amazing data journalism work.
  [/Caption]

[Aside]
  ##### The Whatever Currency devaluated 30% from 100 to 133 from 2017 to 2018.
  [Caption]
  Framing exchange rates in percentage changes, which are difficult to contextualise, especially in when discussing boring exchange rates.
  [/Caption]


  ##### 1000 USD in 2018 was 850 USD in 2017, in terms of Whatever Currency.
  [Caption]
  Framing exchange rates in a certain currency and time. Now that the devaluation is described in terms of USD, a common currency that all my readers understand, the changes in currency value are more contextualised.
  [/Caption]
[/Aside]


  Given the list of currencies I had, I located the historic exchange rates of those currencies against the United States Dollar (USD) through the [link text:"OpenExchangeRates API" url:"https://openexchangerates.org/" target:"_blank"/]. I suddenly realised that it might be difficult to visualise these exchange rates. One usually can't put two exchange rates in the same data viz because their exchange rates are scaled differently.


##### 1 USD = 0.83 Euro = 15.64 Egyptian Pound = 89.08 Argentine Peso

  One can convert the rates into percentage differences across time for valid comparisons, but then I thought that percentages aren't entirely intuitive for people to understand. 

  Thus, I resolved to convert all of the values to a specific currency at a specific year such that comparisons across currencies would be easier for people to understand. Framing the foreign exchange rates in terms of money in a common currency that everyone can contextualise the value of makes cross-currency comparisons all the more visceral. Wow, my classmates from Argentina are really paying that much more than me?


#### Inflation Adjustment

[Aside]
  [img src:"../forex/static/images/johannes.jpeg" alt:"Johannes' explains inflation adjustment." width:`100%` height:"auto"/]
  [Caption]
  Johannes' very fancy notes as to why inflation adjustment makes sense. One cannot compare USD in Brazilian peso in 2020 to USD in Brazillian peso in 2017 assuming all the change was due to forex changes because the value of Brazilian peso changes between those dates.
  [/Caption]
[/Aside]

  Framing exchange rates in terms of a single currency at a particular time also forced me to think about the impact of inflation on how much a currency is actually worth. The economics are somewhat complicated, because I wasn't sure if exchange rates automatically took inflation into account. Thus, I consulted professors and economics majors like Johannes Maria Halkenhaeusser, who confirmed that I had to adjust these values for inflation because I was comparing money across time.

  Thankfully, I managed to find an [link text:"International Monetary Fund dataset" url:"https://www.imf.org/external/datamapper/PCPIEPCH@WEO/WEOWORLD" target:"_blank"/] of end of year inflation rates for majority of the countries that are represented at Minerva. However, since inflation was measured at the end of the year, I had to go away from my currency values being aggregated by semester and instead sum the fees from two semesters into a yearly figure. No biggie!

  ```
  Y2020 cost in 2020 USD → $24,450
  $24,450 (2020 USD) → Forex Conversion to 2020 BRL ≈
  R$134,773 (2020 BRL) → Inflation Adjustment to 2017 BRL ≈
  R$122,163 (2017 BRL) → Forex Conversion to 2017 USD ≈
  $36,890 (2017 USD) → Y2020 cost in BRL (2017 USD)
  ```
[Caption]
How I converted exchange rates to 2017 USD for a specific calendar year and currency? A working example with the Brazillian Real (BRL) and Y2020 is shown in here and in this [link text:"Jupyter Notebook" url:"https://github.com/jasenlo123/jasenlo123-The-Minerva-Quest---Forex/blob/main/Notebooks/Calculation%20Example.ipynb" target:"_blank"/].
[/Caption]

#### Struggles Using D3


With all my data gathered and correctly adjusted, I began to develop the data viz to show the figures in ```D3``` since ```Idyll``` supported ```D3``` data viz components beautifully. By doing all the work to convert the exchange rates into a common unit of 2017 USD, I hoped to create an interactive line chart which would highlight the disparities in tuition costs that students from different countries would have to bear in real terms. I went to work in ```D3```, and managed to build what I envisioned thanks to the numerous ```D3``` examples that were already out there. However, I soon realised how congested the lines were, after all, I was trying to fit approximately 70 different lines onto the same chart and try to make that tell a coherent story. It was impossible to hover on some of the lines because of how close some of the lines were to one another. 

[Aside className:"d3-control"]


  [Caption]
  This was the original ```D3``` line chart of the exchange rate data, with ```Idyll``` component controls in the panel below. The ```D3``` chart has on-hover functionalities that compare currencies with the USD, while the ```Range``` and ```Select``` components allow for the user to control aspects of the data viz. The technique of using Idyll to control the ```D3``` data viz is really cool because - this chart just never made it to production because of how cramped the chart was with all the lines criss-crossing.
  [/Caption]

  [var name:"currency_list" value:`["Albanian Lek","Algerian Dinar","Argentine Peso","Armenian Dram","Australian Dollar","Azerbaijani Manat","Bangladeshi Taka","Belarusian Ruble","Brazilian Real","British Pound Sterling","Bulgarian Lev","Canadian Dollar","Chinese Yuan","Czech Republic Koruna","Danish Krone","Egyptian Pound","Ethiopian Birr","Euro","Georgian Lari","Ghanaian Cedi","Guatemalan Quetzal","Honduran Lempira","Hong Kong Dollar","Hungarian Forint","Indian Rupee","Indonesian Rupiah","Israeli New Sheqel","Jamaican Dollar","Japanese Yen","Jordanian Dinar","Kazakhstani Tenge","Kenyan Shilling","Kyrgystani Som","Malaysian Ringgit","Mexican Peso","Mongolian Tugrik","Moroccan Dirham","Nepalese Rupee","New Taiwan Dollar","New Zealand Dollar","Nigerian Naira","Norwegian Krone","Pakistani Rupee","Philippine Peso","Polish Zloty","Romanian Leu","Russian Ruble","Saudi Riyal","Singapore Dollar","South African Rand","South Korean Won","Swazi Lilangeni","Swedish Krona","Thai Baht","Trinidad and Tobago Dollar","Tunisian Dinar","Turkish Lira","Ugandan Shilling","Ukrainian Hryvnia","United Arab Emirates Dirham","United States Dollar","Uruguayan Peso","Uzbekistan Som","Vietnamese Dong"]`/]
  Y-Axis Upper Bound: $[Display value:Upper  format: "c"/]
  [var name:"Upper" value:40000 /]
  [Range value:Upper min:30000 max:40000 step: 1000/]
  [br/]
  **Black line** is the US Dollar. 
  Choose currency to [text style:`{color: 'red'}`]highlight[/text]: [Select value:selectMyCurTwo options: currency_list  /]
  ##### Lines too close to see? Adjust the y-axis bounds to examine currencies that are bunched up together.


[/Aside]

[data name:"line_data_json" source:"line_data.json" /]
[var name:"Upper" value:40000 /]
[var name:"selectMyCurTwo" value:"Brazilian Real" /]
//main viz
[d3LineChart data:line_data_json upper:Upper highlight:selectMyCurTwo/]


Thus, I thought this might be an awesome use for some of the ```Idyll``` components like ```Range``` and ```Select```, so that the user might be able to control the view of the chart by highlighting a series they were interested in and reducing the bounds of the axis. Yet, even after implementing these components, I was still deeply troubled with this chart because I didn't find it intuitive, there was just too much information and I was expecting a lot from users to explore a pretty dense dataset with an interface that didn't help them immediately capture the takeaways from the data viz.

#### Flourish!

[Aside]
  [Preview header:"Is Blue Mart Overpriced?" description:"One of Simran's data viz article in NYU Abu Dhabi's student publication, The Gazelle." media:"../forex/static/images/simran-flourish.png" url:"https://www.thegazelle.org/issue/185/features/DataViz-Column-Comparison-of-Convenience-Store-vs-Other-UAE-Vendor-Prices" /]
  [Caption]
  Explore one of Simran's many amazing data-driven pieces, where she uses Flourish to great effect, by clicking on the card above. 
  [/Caption]
[/Aside]

Around this time, I noticed that my incredibly talented friend, Simran Parwani, had been using a data viz tool called Flourish to embed charts into her student newspaper at New York University Abu Dhabi. She told me that because the ```SVG```s that ```D3``` creates can be difficult to integrate with the content management system that *The Gazelle* is built on, she used Flourish for her data viz since Flourish charts were easily embed into website. I face similar struggles with the *Minerva Quest*, though I opted to simply create brand new websites and link them through the *Quest* instead, which is obviously a less than ideal solution. 

However, I also noticed how clean and interactive her Flourish charts were, and decided to try play around with the tool, especially after Simran informed me about how Flourish was much easier to work with than ```D3```. I implemented the exact same chart in ```D3``` in Flourish, which inevitably ran into the exact same problems of bring overly crowded, but I discovered a new chart layout that made cross-comparisons of different currencies much more intuitive - a grid of charts!

[Aside]
[img src:"../forex/static/images/grid-chart.gif" alt:"gif of Flourish grid of line charts!" width:`100%` height:"auto"/]
[Caption]
[link text:"A grid of line charts created using Flourish." url:"https://public.flourish.studio/visualisation/5020693" target:"_blank" /] This initial view of the data viz already makes the main takeaway point - The Argentine Peso has devalued significantly compared to other some other currencies.[/Caption]
[/Aside]

On top of the easy cross-currency comparisons, the Flourish grid of charts also made it easy for the user to select different currencies, and features on-hover tooltips for users that want to know specific values. While this would have been possible to implement in ```D3```, it was clear that using Flourish meant that I could entirely skip over the custom ```D3``` data viz making that I had been used to doing in my previous few projects! Of course, this doesn't mean my ```D3``` days are over, it is just that I realise that ```D3``` isn't the answer to every data viz problem, and that finding the right tool for the job at hand can save valuable time and resources. 


#### Qualitative vs. Quantitative?

Having completed the main data viz I had originally set out to create, I took some time to think about the main takeaways from the data and whether my analysis seemed sound. The data was telling me that a hypothetical student paying for the 2020-21 academic year entirely in Argentine peso, Turkish lira, or Brazilian real would have paid upwards of $33,000, while a student paying in USD would have only paid approximately $24,500. Shocking.

[Aside]
  [img src:"../forex/static/images/column-chart.png" alt:"image of Flourish column charts!" width:`100%` height:"auto"/]
  [Caption]
  [link text:"A column chart made with Flourish." url:"https://public.flourish.studio/visualisation/5031220/" target:"_blank" /] This data viz explores the viability of using Minerva's payment plan installment system to delay tuition payments to wait out a period of devalued home currency, and reveals that only students using the Mexican Peso could have benefited (albeit with much risk). [/Caption]
[/Aside]

My uncertainty about this validity of this finding prompted me to interview students from these countries. During these interviews, I learnt of interesting tactics and coping strategies that vulnerable students utilised to protect themselves from home currency devaluation. I also interviewed university financial officers for their perspective on things, which sometimes directly contradicted the experiences of students I interviewed. 

With these new realisations, I was prompted to find out how effective some of these coping mechanisms were based on the data I had collected, which branched out to be its own entirely new section of the article that I had come to write. I continued to use Flourish to visualise some of my investigative analysis into the effectiveness of students' coping mechanisms. 



#### Hold Up. How Did Idyll Help Again?

1. Mobile-responsiveness - ```Idyll```'s default templating options meant that majority of the ```CSS``` that needed to be written, that I wasn't entirely sure how to write, was already done to support the layout and components that I had originally planned out.
2. In-built components - Similarly to the mobile-responsiveness, ```Idyll``` has lots of pre-built components that abstract away lots of custom coding. For instance, I used ```Idyll```'s ```Table``` and ```Header``` components so I don't have to spend the time fretting coding them out myself. This abstraction comes at the cost of having complete control over the components, however. For instance, ```Idyll```'s ```Header``` component's background image can't be made transparent because of a ```CSS``` technicality, and the ```Table``` column widths, row heights and formatting can't be specified. I argue that in this project, I was glad that ```Idyll``` took these burdens off my shoulders.
3. Modularity - Since ```Idyll``` was compiled in ```React```, I had to learn how to write ```React``` components if I wanted to implement components that were not already pre-built in ```Idyll```. The ```D3``` data viz in ```Idyll``` are technically rendered ```React``` components, and this also means ```Idyll``` can incorporate any external ```React``` components or libraries! I enjoyed working structuring my code in terms of ```React``` components since my code was now much more organised. Before, I use to just have one giant ```script.js``` file containing all my ```Javascript``` code. Not ideal. Thus, hurray components!


#### Takeaways
* Collaboration is key! This project would not have been possible without all of the different people who chipped in either as interviewees or just smart people who knew the subject matter better than I did.

* ```D3``` isn't always the answer, and it's better to work smarter by finding the right tools for a data viz problem. If I had continued down the ```D3``` path, it might have taken so much longer to implement the exact same charts I managed to create in Flourish.

* Embracing and being eager to learn new frameworks! ```Idyll``` is amazing, and I wouldn't have gained familiarity with ```React``` or ```Markdown```, or reaped the many benefits of ```Idyll``` if I had insisted on custom coded vanilla ```HTML``` + ```CSS``` + ```Javascript``` web projects.

* Numbers don't tell all the story, but when one uses them to try to tell a story, it's important to remember than these numbers affect real people. I was so shocked by the numbers I found that I wasn't sure if they were accurate, and that I knew that I had to talk to the affected people to get the story from their perspective.


[NextArticle slug:parametricSlug fullWidth:true /]

// Uncomment before pub
//[Analytics google:"UA-9DX3NMQ4V-X" tag:parametricSlug /]
